/**
 * @NApiVersion 2.x
 * @NScriptType MapReduceScript
 */
define(["N/record"], function (record) {
    /**
     * Defines the function that is executed at the beginning of the map/reduce process and generates the input data.
     * @param {Object} inputContext
     * @param {boolean} inputContext.isRestarted - Indicates whether the current invocation of this function is the first
     *     invocation (if true, the current invocation is not the first invocation and this function has been restarted)
     * @param {Object} inputContext.ObjectRef - Object that references the input data
     * @typedef {Object} ObjectRef
     * @property {string|number} ObjectRef.id - Internal ID of the record instance that contains the input data
     * @property {string} ObjectRef.type - Type of the record instance that contains the input data
     * @returns {Array|Object|Search|ObjectRef|File|Query} The input data to use in the map/reduce process
     * @since 2015.2
     */

    const getInputData = function (inputContext) {
        var d = [
                1517505, 1517503, 1517504, 1517506, 1517507, 1517509, 1517508,
                1517510, 1517511, 1517514, 1517513, 1517512, 1517515, 1517517,
                1517516, 1517518, 1517521, 1517519, 1517520, 1517522, 1517523,
                1517525, 1517526, 1517524, 1517527, 1517529, 1517530, 1517528,
                1517533, 1517531, 1517532, 1517534, 1517535, 1517537, 1517536,
                1517538, 1517539, 1517541, 1517540, 1517542, 1517543, 1517545,
                1517546, 1517544, 1517549, 1517547, 1517550, 1517548, 1517551,
                1517553, 1517552, 1517554, 1517555, 1517557, 1517556, 1517558,
                1517559, 1517561, 1517562, 1517560, 1517565, 1517563, 1517564,
                1517566, 1517567, 1517569, 1517568, 1517570, 1517571, 1517573,
                1517574, 1517572, 1517575, 1517577, 1517576, 1517578, 1517581,
                1517579, 1517582, 1517580, 1517585, 1517583, 1517584, 1517586,
                1517589, 1517587, 1517588, 1517590, 1517593, 1517591, 1517594,
                1517592, 1517595, 1517597, 1517596, 1517598, 1517599, 1517601,
                1517602, 1517600, 1517603, 1517605, 1517606, 1517604, 1517607,
                1517608, 1517609, 1517610, 1517611, 1517613, 1517614, 1517612,
                1517615, 1517617, 1517616, 1517618, 1517621, 1517619, 1517620,
                1517622, 1517623, 1517625, 1517624, 1517626, 1517627, 1517629,
                1517630, 1517628, 1517631, 1517633, 1517634, 1517632, 1517637,
                1517635, 1517636, 1517638, 1517639, 1517641, 1517642, 1517640,
                1517643, 1517645, 1517644, 1517646, 1517647, 1517649, 1517648,
                1517650, 1517653, 1517651, 1517652, 1517654, 1517655, 1517657,
                1517658, 1517656, 1517660, 1517659, 1517662, 1517661, 1517663,
                1517664, 1517665, 1517666, 1517667, 1517668, 1517671, 1517669,
                1517670, 1517672, 1517675, 1517673, 1517674, 1517676, 1517679,
                1517677, 1517678, 1517680, 1517684, 1517681, 1517682, 1517683,
                1517688, 1517686, 1517685, 1517687, 1517689, 1517691, 1517690,
                1517692, 1517695, 1517693, 1517694, 1517696, 1517699, 1517697,
                1517700, 1517698, 1517701, 1517903, 1517702, 1517904, 1517905,
                1517907, 1517908, 1517906, 1517909, 1517911, 1517910, 1517912,
                1517915, 1517913, 1517914, 1517916, 1517919, 1517917, 1517920,
                1517918, 1517924, 1517922, 1517921, 1517923, 1517925, 1517927,
                1517926, 1517928, 1517931, 1517929, 1517930, 1517932, 1517933,
                1517935, 1517936, 1517934, 1517938, 1517937, 1517941, 1517939,
                1517940, 1517942, 1517945, 1517943, 1517944, 1517946, 1517947,
                1517948, 1517949, 1517950, 1517952, 1517951, 1517954, 1517953,
                1517955, 1517957, 1517956, 1517958, 1517961, 1517959, 1517962,
                1517960, 1517963, 1517965, 1517964, 1517966, 1517967, 1517969,
                1517968, 1517970, 1517971, 1517973, 1517972, 1517974, 1517977,
                1517975, 1517978, 1517976, 1517979, 1517981, 1517982, 1517980,
                1517983, 1517985, 1517986, 1517984, 1517987, 1517989, 1517990,
                1517988, 1517991, 1517993, 1517992, 1517994, 1517997, 1517995,
                1517998, 1517996, 1518001, 1517999, 1518002, 1518000, 1518405,
                1518403, 1518404, 1518406, 1518407, 1518409, 1518408, 1518410,
                1518413, 1518411, 1518412, 1518414, 1518417, 1518415, 1518418,
                1518416, 1518419, 1518421, 1518420, 1518422, 1518425, 1518423,
                1518424, 1518426, 1518427, 1518429, 1518430, 1518428, 1518431,
                1518433, 1518434, 1518432, 1518435, 1518437, 1518438, 1518436,
                1518439, 1518441, 1518440, 1518442, 1518445, 1518444, 1518443,
                1518446, 1518448, 1518450, 1518447, 1518449, 1518452, 1518453,
                1518454, 1518451, 1518455, 1518457, 1518458, 1518456, 1518460,
                1518462, 1518461, 1518459, 1518465, 1518463, 1518466, 1518464,
                1518467, 1518469, 1518470, 1518468, 1518473, 1518471, 1518472,
                1518474, 1518477, 1518475, 1518476, 1518478, 1518479, 1518481,
                1518480, 1518482, 1518483, 1518485, 1518484, 1518486, 1518487,
                1518489, 1518490, 1518488, 1518493, 1518491, 1518492, 1518494,
                1518497, 1518495, 1518496, 1518498, 1518499, 1518501, 1518500,
                1518502, 1518805, 1518803, 1518806, 1518804, 1518809, 1518807,
                1518810, 1518808, 1518811, 1518813, 1518812, 1518814, 1518815,
                1518816, 1518818, 1518817, 1518819, 1518820, 1518822, 1518821,
                1518823, 1518824, 1518825, 1518826, 1518828, 1518827, 1518829,
                1518830, 1518831, 1518832, 1518834, 1518833, 1518835, 1518836,
                1518837, 1518838, 1518839, 1518840, 1518841, 1518842, 1518844,
                1518843, 1518845, 1518846, 1518847, 1518848, 1518850, 1518849,
                1518851, 1518852, 1518853, 1518855, 1518854, 1518856, 1518859,
                1518857, 1518860, 1518858, 1518861, 1518863, 1518862, 1518864,
                1518865, 1518867, 1518876, 1518874, 1518877, 1518879, 1518878,
                1518880, 1518883, 1518881, 1518882, 1518884, 1518887, 1518885,
                1518886, 1518888, 1518889, 1518891, 1518892, 1518890, 1518895,
                1518893, 1518894, 1518896, 1518899, 1518897, 1518898, 1518900,
                1518901, 1519303, 1519304, 1518902, 1519305, 1519306, 1519307,
                1519308, 1519310, 1519309, 1519311, 1519312, 1519314, 1519313,
                1519316, 1519315, 1519318, 1519317, 1519320, 1519319, 1519322,
                1519321, 1519324, 1519323, 1519327, 1519325, 1519326, 1519328,
                1519329, 1519331, 1519330, 1519332, 1519335, 1519333, 1519334,
                1519336, 1519339, 1519337, 1519338, 1519340, 1519343, 1519341,
                1519342, 1519344, 1519346, 1519345, 1519347, 1519348, 1519349,
                1519350, 1519352, 1519351, 1519354, 1519353, 1519355, 1519356,
                1519357, 1519359, 1519358, 1519360, 1519361, 1519363, 1519362,
                1519364, 1519365, 1519366, 1519367, 1519368, 1519371, 1519369,
                1519370, 1519372, 1519375, 1519373, 1519374, 1519376, 1519377,
                1519379, 1519378, 1519380, 1519382, 1519381, 1519383, 1519384,
                1519385, 1519386, 1519387, 1519388, 1519389, 1519390, 1519392,
                1519391, 1519395, 1519393, 1519396, 1519394, 1519397, 1519398,
                1519400, 1519399, 1519401, 1519803, 1519402, 1519804, 1519805,
                1519806, 1519808, 1519807, 1519809, 1519810, 1519813, 1519814,
                1519817, 1519815, 1519816, 1519818, 1519819, 1519821, 1519822,
                1519820, 1519823, 1519825, 1519824, 1519826, 1519829, 1519827,
                1519830, 1519828, 1519831, 1519833, 1519834, 1519832, 1519837,
                1519835, 1519836, 1519838, 1519841, 1519839, 1519842, 1519840,
                1519845, 1519843, 1519846, 1519844, 1519847, 1519849, 1519848,
                1519850, 1519854, 1519852, 1519851, 1519853, 1519855, 1519858,
                1519856, 1519857, 1519861, 1519859, 1519860, 1519862, 1519865,
                1519863, 1519866, 1519864, 1519868, 1519870, 1519869, 1519867,
                1519873, 1519871, 1519872, 1519874, 1519875, 1519877, 1519878,
                1519876, 1519879, 1519881, 1519882, 1519880, 1519885, 1519883,
                1519884, 1519886, 1519890, 1519888, 1519887, 1519889, 1519892,
                1519894, 1519891, 1519893, 1519895, 1519898, 1519896, 1519897,
                1519899, 1519901, 1519902, 1519900, 1520306, 1520304, 1520303,
                1520305, 1520307, 1520309, 1520310, 1520308, 1520313, 1520311,
                1520314, 1520312, 1520317, 1520315, 1520318, 1520316, 1520322,
                1520320, 1520325, 1520323, 1520324, 1520326, 1520327, 1520329,
                1520328, 1520330, 1520331, 1520333, 1520334, 1520332, 1520335,
                1520337, 1520338, 1520336, 1520339, 1520341, 1520343, 1520345,
                1520344, 1520346, 1520349, 1520347, 1520348, 1520350, 1520354,
                1520351, 1520352, 1520353, 1520358, 1520356, 1520357, 1520355,
                1520361, 1520359, 1520360, 1520362, 1520363, 1520365, 1520366,
                1520364, 1520369, 1520367, 1520370, 1520368, 1520373, 1520371,
                1520374, 1520372, 1520375, 1520377, 1520376, 1520378, 1520379,
                1520381, 1520382, 1520380, 1520383, 1520385, 1520386, 1520384,
                1520387, 1520388, 1520389, 1520390, 1520391, 1520392, 1520393,
                1520394, 1520397, 1520395, 1520398, 1520396, 1520399, 1520401,
                1520400, 1520402, 1520805, 1520803, 1520804, 1520806, 1520809,
                1520807, 1520810, 1520808, 1520811, 1520813, 1520812, 1520814,
                1520815, 1520817, 1520816, 1520818, 1520821, 1520819, 1520822,
                1520820, 1520825, 1520823, 1520824, 1520826, 1520827, 1520829,
                1520828, 1520830, 1520831, 1520833, 1520832, 1520834, 1520835,
                1520837, 1520836, 1520838, 1520841, 1520839, 1520840, 1520842,
                1520845, 1520843, 1520844, 1520846, 1520847, 1520848, 1520850,
                1520849, 1520852, 1520851, 1520853, 1520854, 1520856, 1520855,
                1520857, 1520858, 1520859, 1520860, 1520861, 1520862, 1520864,
                1520863, 1520865, 1520866, 1520867, 1520869, 1520868, 1520870,
                1520873, 1520871, 1520874, 1520872, 1520875, 1520877, 1520876,
                1520878, 1520879, 1520881, 1520880, 1520882, 1520883, 1520885,
                1520884, 1520886, 1520889, 1520887, 1520888, 1520890, 1520891,
                1520893, 1520892, 1520894, 1520897, 1520895, 1520898, 1520896,
                1520899, 1520901, 1520900, 1520902, 1521303, 1521305, 1521304,
                1521306, 1521309, 1521308, 1521307, 1521310, 1521314, 1521312,
                1521311, 1521313, 1521315, 1521317, 1521316, 1521318, 1521321,
                1521319, 1521322, 1521320, 1521323, 1521325, 1521324, 1521326,
                1521329, 1521327, 1521330, 1521328, 1521331, 1521333, 1521332,
                1521334, 1521337, 1521335, 1521338, 1521336, 1521341, 1521339,
                1521340, 1521342, 1521343, 1521345, 1521346, 1521344, 1521347,
                1521349, 1521348, 1521350, 1521351, 1521353, 1521354, 1521352,
                1521355, 1521357, 1521358, 1521356, 1521359, 1521361, 1521362,
                1521360, 1521363, 1521365, 1521366, 1521364, 1521370, 1521367,
                1521369, 1521368, 1521371, 1521373, 1521374, 1521372, 1521378,
                1521376, 1521375, 1521377, 1521381, 1521379, 1521382, 1521380,
                1521383, 1521385, 1521384, 1521386, 1521389, 1521387, 1521388,
                1521390, 1521393, 1521391, 1521392, 1521394, 1521395, 1521397,
                1521398, 1521396, 1521401, 1521399, 1521400, 1521402, 1521703,
                1521705, 1521706, 1521704, 1521707, 1521709, 1521708, 1521710,
                1521711, 1521713, 1521714, 1521712, 1521715, 1521717, 1521716,
                1521718, 1521719, 1521721, 1521722, 1521720, 1521723, 1521725,
                1521724, 1521726, 1521727, 1521729, 1521728, 1521730, 1521731,
                1521733, 1521732, 1521734, 1521737, 1521735, 1521736, 1521738,
                1521741, 1521739, 1521740, 1521742, 1521743, 1521745, 1521746,
                1521744, 1521747, 1521748, 1521749, 1521750, 1521752, 1521751,
                1521753, 1521754, 1521755, 1521756, 1521757, 1521758, 1521760,
                1521759, 1521762, 1521761, 1521763, 1521765, 1521764, 1521766,
                1521767, 1521769, 1521770, 1521768, 1521773, 1521771, 1521772,
                1521774, 1521775, 1521777, 1521778, 1521776, 1521779, 1521781,
                1521782, 1521780, 1521784, 1521783, 1521786, 1521785, 1521787,
                1521789, 1521790, 1521788, 1521791, 1521792, 1521793, 1521794,
                1521796, 1521795, 1521797, 1521798, 1521800, 1521799, 1521802,
                1521801, 1522203, 1522205, 1522204, 1522206, 1522208, 1522207,
                1522209, 1522210, 1522212, 1522211, 1522213, 1522214, 1522215,
                1522216, 1522217, 1522218, 1522220, 1522219, 1522222, 1522221,
                1522223, 1522224, 1522226, 1522225, 1522228, 1522227, 1522257,
                1522259, 1522260, 1522258, 1522263, 1522261
            ];
        return d;
    };

    /**
     * Defines the function that is executed when the map entry point is triggered. This entry point is triggered automatically
     * when the associated getInputData stage is complete. This function is applied to each key-value pair in the provided
     * context.
     * @param {Object} mapContext - Data collection containing the key-value pairs to process in the map stage. This parameter
     *     is provided automatically based on the results of the getInputData stage.
     * @param {Iterator} mapContext.errors - Serialized errors that were thrown during previous attempts to execute the map
     *     function on the current key-value pair
     * @param {number} mapContext.executionNo - Number of times the map function has been executed on the current key-value
     *     pair
     * @param {boolean} mapContext.isRestarted - Indicates whether the current invocation of this function is the first
     *     invocation (if true, the current invocation is not the first invocation and this function has been restarted)
     * @param {string} mapContext.key - Key to be processed during the map stage
     * @param {string} mapContext.value - Value to be processed during the map stage
     * @since 2015.2
     */

    const map = function (mapContext) {
        try {
          log.debug('map',mapContext)
            record.delete({
                type: record.Type.BILLING_REVENUE_EVENT,
                id: mapContext.value
            });
        } catch (e) {
            log.error({
                title: "ERROR IN MAP",
                details: e
            });
        }
    };

    /**
     * Defines the function that is executed when the summarize entry point is triggered. This entry point is triggered
     * automatically when the associated reduce stage is complete. This function is applied to the entire result set.
     * @param {Object} summaryContext - Statistics about the execution of a map/reduce script
     * @param {number} summaryContext.concurrency - Maximum concurrency number when executing parallel tasks for the map/reduce
     *     script
     * @param {Date} summaryContext.dateCreated - The date and time when the map/reduce script began running
     * @param {boolean} summaryContext.isRestarted - Indicates whether the current invocation of this function is the first
     *     invocation (if true, the current invocation is not the first invocation and this function has been restarted)
     * @param {Iterator} summaryContext.output - Serialized keys and values that were saved as output during the reduce stage
     * @param {number} summaryContext.seconds - Total seconds elapsed when running the map/reduce script
     * @param {number} summaryContext.usage - Total number of governance usage units consumed when running the map/reduce
     *     script
     * @param {number} summaryContext.yields - Total number of yields when running the map/reduce script
     * @param {Object} summaryContext.inputSummary - Statistics about the input stage
     * @param {Object} summaryContext.mapSummary - Statistics about the map stage
     * @param {Object} summaryContext.reduceSummary - Statistics about the reduce stage
     * @since 2015.2
     */
    const summarize = function(summary) {

    log.audit('done')};
  
    return { getInputData:getInputData, map:map, summarize:summarize };
});
